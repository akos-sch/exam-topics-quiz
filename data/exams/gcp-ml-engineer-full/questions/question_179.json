{
  "id": "question_179",
  "number": 179,
  "topic": "Topic 1",
  "text": "You recently used XGBoost to train a model in Python that will be used for online serving. Your model prediction service will be called by a backend service implemented in Golang running on a Google Kubernetes Engine (GKE) cluster. Your model requires pre and postprocessing steps. You need to implement the processing steps so that they run at serving time. You want to minimize code changes and infrastructure maintenance, and deploy your model into production as quickly as possible. What should you do?",
  "choices": [
    {
      "letter": "A",
      "text": "Use FastAPI to implement an HTTP server. Create a Docker image that runs your HTTP server, and deploy it on your organizationâ€™s GKE cluster.",
      "is_most_voted": false,
      "is_correct": false
    },
    {
      "letter": "B",
      "text": "Use FastAPI to implement an HTTP server. Create a Docker image that runs your HTTP server, Upload the image to Vertex AI Model Registry and deploy it to a Vertex AI endpoint.",
      "is_most_voted": false,
      "is_correct": false
    },
    {
      "letter": "C",
      "text": "Use the Predictor interface to implement a custom prediction routine. Build the custom container, upload the container to Vertex AI Model Registry and deploy it to a Vertex AI endpoint.",
      "is_most_voted": false,
      "is_correct": true
    },
    {
      "letter": "D",
      "text": "Use the XGBoost prebuilt serving container when importing the trained model into Vertex AI. Deploy the model to a Vertex AI endpoint. Work with the backend engineers to implement the pre- and postprocessing steps in the Golang backend service.",
      "is_most_voted": false,
      "is_correct": false
    }
  ],
  "correct_answer": "C",
  "explanation": "",
  "voting_data": {
    "total_votes": 15,
    "vote_distribution": {},
    "most_voted_answer": "C",
    "confidence_score": 0.5714
  },
  "metadata": {
    "extraction_timestamp": "2025-05-29T12:17:40.579947",
    "source_url": "data/input/page-4.html",
    "page_number": 1,
    "difficulty_level": ""
  }
}

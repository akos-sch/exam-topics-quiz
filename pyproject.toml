[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "cert-examtopics-quiz"
version = "0.1.0"
description = "A quiz application for certificate exam topics"
readme = "README.md"
requires-python = ">=3.12"
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    "typer",
    "rich",
    "pydantic>=2.0.0",
    "pydantic-settings",
    "requests",
    "beautifulsoup4",
    "langchain-core",
    "langchain-google-vertexai",
    "markdown-it-py",
    "pyyaml",
    "tqdm",
]

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-cov",
    "ruff",
    "mypy",
    "pre-commit",
]
test = [
    "pytest",
    "pytest-cov",
    "pytest-mock",
]
docs = [
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings[python]",
]

[project.scripts]
cert-examtopics-quiz = "cert_examtopics_quiz.cli:cli"

[project.urls]
Homepage = "https://github.com/yourusername/cert-examtopics-quiz"
Repository = "https://github.com/yourusername/cert-examtopics-quiz.git"
Issues = "https://github.com/yourusername/cert-examtopics-quiz/issues"
Changelog = "https://github.com/yourusername/cert-examtopics-quiz/blob/main/CHANGELOG.md"

[tool.hatch.build.targets.wheel]
packages = ["src/cert_examtopics_quiz"]

[tool.hatch.version]
path = "src/cert_examtopics_quiz/__init__.py"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=cert_examtopics_quiz",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.ruff]
target-version = "py312"
line-length = 88
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "C901", # too-complex
    "SIM", # flake8-simplify
    "TC", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q", # flake8-quotes
    "PLE", # pylint errors
    "PLR", # pylint refactor
    "PLW", # pylint warnings
]
ignore = [
    "E501",  # line too long, handled by formatter
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
    "PLW2901", # redefined-loop-name
    "TC002", # move third-party import into TYPE_CHECKING block
    "TC003", # move standard library import into TYPE_CHECKING block
    "ARG001", # unused function argument (for CLI callbacks)
]

[tool.ruff.lint.isort]
known-first-party = ["cert_examtopics_quiz"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "scripts.*"
disallow_untyped_defs = false
check_untyped_defs = false

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
